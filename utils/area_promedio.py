import numpy as np
import os

# --- Tu funci칩n original para cargar los datos ---
# (Se asume que librer칤as como tensorflow o PIL est치n instaladas para load_img)
from tensorflow.keras.preprocessing.image import load_img, img_to_array

def load_dataset(image_directory, mask_directory):
    images = []
    masks = []
    for image_filename in os.listdir(image_directory):
        if image_filename.endswith('.jpg') or image_filename.endswith('.png'):
            img_path = os.path.join(image_directory, image_filename)
            img = load_img(img_path)
            img_array = img_to_array(img)
            images.append(img_array)

            image_name_without_extension = image_filename.rsplit('.', 1)[0]
            mask_filename = image_name_without_extension + '_mask.png'
            mask_path = os.path.join(mask_directory, mask_filename)
            if os.path.exists(mask_path):
                mask = load_img(mask_path, color_mode='grayscale')
                mask_array = img_to_array(mask)
                masks.append(mask_array)
            else:
                print("No se encontr칩 la m치scara para la imagen:", image_filename)

    return np.array(images), np.array(masks)

# --- Funci칩n para calcular e imprimir el promedio de 치rea por clase ---

def print_average_class_area(masks_array, class_pixels=[0, 1, 2, 3, 4, 5]):
    """
    Calcula e imprime el 치rea promedio (en p칤xeles) que ocupa cada clase
    en un conjunto de m치scaras de segmentaci칩n.

    Args:
        masks_array (np.array): Un array de NumPy que contiene todas las m치scaras.
                                La forma esperada es (num_mascaras, alto, ancho, 1).
        class_pixels (list): Una lista de los valores de p칤xel que definen cada clase.
    """
    # Asegurarse de que el array no est칠 vac칤o
    if masks_array.size == 0:
        print("El array de m치scaras est치 vac칤o.")
        return

    num_masks = masks_array.shape[0]
    print(f"游늵 Analizando {num_masks} m치scaras...")
    print("-" * 40)

    for class_value in class_pixels:
        # Contar el n칰mero total de p칤xeles para la clase actual en TODAS las m치scaras
        total_class_pixels = np.sum(masks_array == class_value)

        # Calcular el promedio dividiendo por el n칰mero de m치scaras
        average_area = total_class_pixels / num_masks

        print(f"Clase {class_value}: 츼rea promedio = {average_area:.2f} p칤xeles")

    print("-" * 40)


# --- Ejemplo de uso ---

# 2. Llamar a la funci칩n con los datos de ejemplo
# En tu caso, la llamar칤as as칤:
images, masks = load_dataset('Balanced/train/images', 'Balanced/train/masks')
# print_average_class_area(masks)

print("--- Ejecutando con datos de ejemplo ---")
print_average_class_area(masks)